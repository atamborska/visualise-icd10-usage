---
title: "ICD-10 Usage in NHS Englad Hospital Episode Statistics (2013-2023)"
subtitle: "Examination of pregnancy code usage and development of a visualisation tool"
author: "Arina Tamborska"
format: 
  html:
    df-print: paged
editor: visual
---

```{r}
knitr::opts_chunk$set(message= FALSE, warning = FALSE, echo = F)
```

# Introduction

This document downloads, processes, and visualizes the annual usage of ICD-10 codes from Hospital Episode Statistics: records of individual hospital admissions from the NHS England.

# Methods


```{r}
#| label: load-pckgs

#Load libraries
if (!require(readxl)) install.packages("readxl")
if (!require(forcats)) install.packages("forcats")
if (!require (gt)) install.packages("gt")
if (!require(shiny)) install.packages ("shiny")
if (!require(reticulate)) install.packages("reticulate")


library(tidyverse)
library(janitor)
library (readxl)
library(forcats)
library(gt)
library(shiny)
library(reticulate)
```

The data are publicly available as xlsx files here: <https://digital.nhs.uk/data-and-information/publications/statistical/hospital-admitted-patient-care-activity>.

We elected to visualise total usage (for all diagnoses recorded in completed consultant episodes) of four letter ICD-10 codes.

All files between 2013 and 2023 were individually downloaded and inspected. To be processed, they met the following criteria:

-   all diagnosis four letter code are in tab 6

-   the usage counts start no earlier than row 11

-   columns A, B and H (1, 2 and 8) correspond to code, diagnosis, and usage

There were exceptions:

-   2020 - 2017 usage count starts in row 12

-   2016, 2015 usage count starts in row 13

-   2014 - count starts in row 19, counts in column C

-   2013 - count starts in row 20, counts in column C

-   2012 - earlier: there are just primary diagnosis labels, no all diagnosis. Therefore the data from 2012 and earlier are not included in this report.


```{r}
#| label: list-urls-years
#| cache: true

# Create a list of urls with years assigned to them, because of different formatting, create 2015 - 2023, and 2013-2014 separately

icd10_usage_urls_2015_2023<- list(
  "2023-09-01" = "https://files.digital.nhs.uk/7A/DB1B00/hosp-epis-stat-admi-diag-2022-23-tab_V2.xlsx",
  "2022-09-01" = "https://files.digital.nhs.uk/0E/E70963/hosp-epis-stat-admi-diag-2021-22-tab.xlsx",
  "2021-09-01" = "https://files.digital.nhs.uk/5B/AD892C/hosp-epis-stat-admi-diag-2020-21-tab.xlsx",
  "2020-09-01" = "https://files.digital.nhs.uk/37/8D9781/hosp-epis-stat-admi-diag-2019-20-tab%20supp.xlsx",
  "2019-09-01" = "https://files.digital.nhs.uk/1C/B2AD9B/hosp-epis-stat-admi-diag-2018-19-tab.xlsx",
  "2018-09-01" = "https://files.digital.nhs.uk/B2/5CEC8D/hosp-epis-stat-admi-diag-2017-18-tab.xlsx",
  "2017-09-01" = "https://files.digital.nhs.uk/publication/7/d/hosp-epis-stat-admi-diag-2016-17-tab.xlsx",
  "2016-09-01" = "https://files.digital.nhs.uk/publicationimport/pub22xxx/pub22378/hosp-epis-stat-admi-diag-2015-16-tab.xlsx",
  "2015-09-01" = "https://files.digital.nhs.uk/publicationimport/pub19xxx/pub19124/hosp-epis-stat-admi-diag-2014-15-tab.xlsx")


icd10_usage_urls_2013_2014 <- list(
  "2014-09-01" = "https://files.digital.nhs.uk/publicationimport/pub16xxx/pub16719/hosp-epis-stat-admi-diag-2013-14-tab.xlsx",
  "2013-09-01" = "https://files.digital.nhs.uk/publicationimport/pub12xxx/pub12566/hosp-epis-stat-admi-diag-2012-13-tab.xlsx"
  )
```



```{r}
#| label: process-2015-2023-data
#| cache: true

df_2015_2023 <- data.frame()

for (url in icd10_usage_urls_2015_2023) {
  download.file(url, destfile = "tmp.xlsx", mode = "wb")
  
  # read in sheet 6 (all four letter diagnoses)
  df <- read_excel("tmp.xlsx", sheet = 6, col_names = T, skip = 10)
  file.remove("tmp.xlsx")
  
  # keep cols A (=code), B (=diagnosis), H (=usage)
  df <- df[, c(1,2,8)]
  colnames(df) <- c("code", "diagnosis", "use")
  df$use<- as.numeric(df$use)
  
  #Create an index to assign a year
  index <- which(
    sapply(
      icd10_usage_urls_2015_2023, function(x) url %in% x))
  
  # Process the df: remove NAs use, add prop, add year, remove str .
  df <- df |>
    filter(!is.na(use)) |>
    mutate(
    prop = use/ sum(use),
    year = as.Date(names(icd10_usage_urls_2015_2023)[index]),
    code = str_replace_all(code, "\\.", "")
    )
  
  # Bind all dfs together
  df_2015_2023 <- rbind(df_2015_2023, df)
}


```



```{r}
#| label: process-2013-2014-data
#| cache: true

df_2013_2014 <- data.frame()

for (i in seq_along(icd10_usage_urls_2013_2014)) {
  
  # extract list object and its name
  year <- names(icd10_usage_urls_2013_2014)[i]
  url <- icd10_usage_urls_2013_2014[[i]]
  
  # download the xlsx
  download.file(url, destfile = "tmp.xlsx", mode="wb")
  df <- read_excel("tmp.xlsx", sheet = 6, col_names = T, skip = 10)
  file.remove("tmp.xlsx")
  
  # keep cols A (=code), B (=diagnosis), C (=usage)
  df <- df[, 1:3]
  colnames(df) <- c("code", "diagnosis", "use")
  df$use<- as.numeric(df$use)
  
  # Process the df: remove NAs use, add prop, add year, remove str .
  df <- df |>
    filter(!is.na(use)) |>
    mutate(
    prop = use/ sum(use),
    year = as.Date(year),
    code = str_replace_all(code, "\\.", "")
    )
  
  # Bind all dfs together
  df_2013_2014 <- rbind(df_2013_2014, df)
  
}

rm(df, i, index, url, year)
```


```{r}
#| label: bind-df
#| cache: true

df_2013_2023 <- rbind(df_2015_2023, df_2013_2014)

df <- 
  df_2013_2023 |>
  mutate(year = year(year))
write.csv(df, "df.csv", fileEncoding = "UTF-8")

rm(df_2013_2014, df_2015_2023, icd10_usage_urls_2013_2014, icd10_usage_urls_2015_2023)
```

# Results

## Visualisation of codes with largest usage

```{r}
#| label: visualise

# Example vis - those contributing more than 1% in at least one year

# Identify codes for these

codes_usage_0.01 <- 
  df_2013_2023 |> 
  filter(prop >= 0.01)|>
  select(code) |>
  unique()
codes_usage_0.01 <- codes_usage_0.01$code

# Visualise

# With codes
df_2013_2023 |>
  filter(code %in% codes_usage_0.01)|>
  ggplot(aes(year, use, colour = code)) +
  geom_line() +
  theme_minimal()

# With diagnoses
df_2013_2023 |>
  filter(code %in% codes_usage_0.01)|>
  ggplot(aes(year, use, colour = diagnosis)) +
  geom_line() +
  theme_minimal()

```

## Tabular exploration of pregnancy codes

```{r}
#| label: pregnancy-df
#| cache: true

pregnancy_codelist_url<- "https://www.opencodelists.org/codelist/opensafely/pregnancy-icd10-aurum/5a7d8d12/download.csv"

pregnancy_codes <- read.csv(pregnancy_codelist_url)[,1]

df_pregnancy <- df |>
  filter(code %in% pregnancy_codes)
```

First, we examined the frequency with which the codes appear in the HES.

Between 2012 and 2023, from 550 codes present in the codelist, 448 have appeared at least once. 280 of these appeared across all years, and 68 appeared in all but one year.

```{r}
#| label: pregnancy-tabs-1

# Basic investigation into the frequency of pregnancy codes
df_pregnancy$code|>
  unique() |>
  length()

df_pregnancy |>
  group_by(code) |>
  summarise(count = n()) |>
  group_by(count) |>
  summarise(codes = n())|>
  arrange(desc(count)) |>
  set_names("Number of years in which the code is present", 
            "Number of unique codes") |>
  gt() |> 
  opt_interactive(
    use_highlight = T,
    use_compact_mode = T,
    ) 
  
```

Next, we examined how the variety (use of distinct codes) and volume varied over time. Notably, despite stable use of the codes, the total volume of pregnancy codes doubled in 2023 and 2024 in comparison with previous years.

```{r}
#| label: pregnancy-tabs-2

df_pregnancy |>
  group_by(year) |>
  summarise(count = n(), volume = sum(use))|>
  arrange(desc(year))|>
  set_names(c("Year", "No. of unique codes", "Total use")) |>
  gt() |> 
  opt_interactive(
    use_highlight = T,
    use_compact_mode = T,
    ) 

df_pregnancy |>
  group_by(year) |>
  summarise(count = n(), volume = sum(use))|>
  ggplot(aes(year, (volume/1000))) +
  geom_line() +
  theme_minimal()+
  labs(title = "Total pregnancy code use in HES", x = "Year", y= "Use in thousands") +
  scale_x_continuous(breaks = seq(min(df_pregnancy$year), max(df_pregnancy$year), by = 1))
```

Finally, we examined the most frequently used codes, and their change over time. This was to establish why the rate of reporting in HES doubles in 2022 and 2023. Code Z370("single live birth) was introduced in 2022 and has high-volume. It's removal from HES partially reduced the difference pre-2022 and 2022-20223. Further such code, but to lesser volume is Z352 ("Supervision of pregnancy with other poor reproductive or obstetric history"). This code has some earlier usage but of smaller volume.

```{r}
#| label: pregnancy-tabs-3

# df_pregnancy |>
  #slice_max(use, by = year, n = 5)|>
  #select(code, diagnosis, use, year)

df_pregnancy |>
  slice_max(use, by = year, n = 10)|>
  select(-c(prop))|>
  arrange(year) |>
  pivot_wider(values_from = use, names_from = year)|>
  gt() |> 
  sub_missing(
    missing_text = "--")

```

```{r}
df_pregnancy |>
  filter(code != "Z370") |>
  group_by(year)|>
  summarise(volume = sum(use))|>
  ggplot(aes(year, volume/1000)) +
  geom_line()+
  theme_bw()+
  labs(title = "Total pregnancy code use in HES, excl. Z370", x = "Year", y= "Use in thousands") +
  scale_x_continuous(breaks = seq(min(df_pregnancy$year), max(df_pregnancy$year), by = 1))

```

```{r}
df_pregnancy |>
  filter(!code %in% c("Z370", "Z352")) |>
  group_by(year)|>
  summarise(volume = sum(use))|>
  ggplot(aes(year, volume/1000)) +
  geom_line()+
  theme_bw()+
  labs(title = "Total pregnancy code use in HES, excl. Z370 & Z352", x = "Year", y= "Use in thousands") +
  scale_x_continuous(breaks = seq(min(df_pregnancy$year), max(df_pregnancy$year), by = 1))

```

## Visual exploration of pregnancy codes

```{r}
df_pregnancy|>
  mutate(diagnosis = ifelse(prop >= 0.001, diagnosis, "Other")) |>
  group_by(year, diagnosis) |>
  summarise(use = sum(use), .groups = "drop")|>
  ggplot(aes(
    x = as.factor(year), 
    y = use/1000, 
    fill = forcats::fct_reorder(diagnosis, use)
    ))+
  geom_bar(stat = "identity")+
  theme_minimal()+
  labs(y = "Code use in thousands", x = "Year", fill = "Code",
       title = "Cummulative use of the most common pregnancy codes") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
  scale_fill_brewer(palette = 4) 

```

# Develop an app in R shiny

```{r,shiny = T}

#| label: shiny-app

ui <- fluidPage(
  titlePanel("ICD-10 Usage over time in HES"),
  
  sidebarLayout(
    sidebarPanel(
      textInput("icd10_code", 
                "Enter the ICD-10 code:", 
                value = "A000"),
      sliderInput("year_range", 
                  "Select year range:",
                  min = 2013, 
                  max = 2023, 
                  value = c(2013, 2023), 
                  step = 1,
                  sep = "")
    ),
    
    mainPanel(
      textOutput("diagnosis"),
      tableOutput("usage_table"),
      plotOutput("usage_plot")
    )
  )
)


server <- function(input, output) {
  
  filtered_df <- reactive({
    df |>
      filter(code == input$icd10_code,
             year  >= input$year_range[1],
             year <= input$year_range[2])
  })
  
  output$diagnosis <- renderText({
    if (input$icd10_code %in% df$code) {
        unique(filtered_df()$diagnosis)
    } else {
      "No such ICD-10 code."
    }  
      
  })
  
  output$usage_table <- renderTable({
    if(nrow(filtered_df())>0){
      filtered_df()|>
        select(year, use)|>
        mutate(year = as.integer(year),
               use = as.integer(use))|>
        setNames(c("Year", "Annual Use"))
    } else {
      "No data for the selected year range."
    }
  })
  
  output$usage_plot <- renderPlot({
    if (nrow(filtered_df()>0)) {
      ggplot(filtered_df(), aes(
        x = year, 
        y = use)) +
        geom_line() +
        geom_point() +
        labs(x = "Year", y = "Usage") +
        scale_x_continuous(breaks = 
                             seq(input$year_range[1],
                                 input$year_range[2], 
                                 1), 
                           labels = 
                             seq(input$year_range[1],
                                 input$year_range[2], 
                                 1))+
        theme_minimal()
    } else {
      ""
    }
  })
}

shinyApp(ui = ui, server = server)

```

# Develop an app in python streamlit

First, run the following chunk to ensure the right environment for the app.

```{python}
# Install packages

import subprocess
import sys

packages = ['streamlit', 'pandas', 'matplotlib'] 

def install(package):
    subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])

for package in packages:
    try:
        __import__(package)
    except ImportError:
        print(f"Installing {package}...")
        install(package)
    else:
        print(f"{package} is already installed.")

```

Next run the following in your terminal:

\`\`\`bash streamlit run icd10_app.py
